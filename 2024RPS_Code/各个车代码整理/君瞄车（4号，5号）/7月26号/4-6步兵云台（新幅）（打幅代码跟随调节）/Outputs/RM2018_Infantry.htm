<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Outputs\RM2018_Infantry.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Outputs\RM2018_Infantry.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Fri Sep 01 17:20:13 2023
<BR><P>
<H3>Maximum Stack Usage =        892 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
UART4_IRQHandler &rArr; targetOffsetDataDeal &rArr; process_general_message &rArr; host_to_device__frame__unpack &rArr; protobuf_c_message_unpack &rArr; parse_member &rArr; parse_oneof_member &rArr; parse_required_member &rArr;  protobuf_c_message_unpack (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[128]">prefixed_message_pack</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[132]">protobuf_c_message_pack</a><BR>
 <LI><a href="#[119]">required_field_get_packed_size</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[116]">protobuf_c_message_get_packed_size</a><BR>
 <LI><a href="#[110]">repeated_field_get_packed_size</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[116]">protobuf_c_message_get_packed_size</a><BR>
 <LI><a href="#[144]">protobuf_c_message_free_unpacked</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[144]">protobuf_c_message_free_unpacked</a><BR>
 <LI><a href="#[146]">parse_required_member</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[152]">protobuf_c_message_unpack</a><BR>
 <LI><a href="#[13d]">merge_messages</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13d]">merge_messages</a><BR>
 <LI><a href="#[16]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">SysTick_Handler</a><BR>
 <LI><a href="#[29]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[29]">ADC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[11]">BusFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2b]">CAN1_RX0_IRQHandler</a> from can1.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2c]">CAN1_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2d]">CAN1_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2a]">CAN1_TX_IRQHandler</a> from can1.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[57]">CAN2_RX0_IRQHandler</a> from can2.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[58]">CAN2_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[59]">CAN2_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[56]">CAN2_TX_IRQHandler</a> from can2.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[66]">CRYP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[65]">DCMI_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[25]">DMA1_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream4_IRQHandler</a> from uart4.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[28]">DMA1_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[46]">DMA1_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5b]">DMA2_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5c]">DMA2_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5d]">DMA2_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[14]">DebugMon_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[54]">ETH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[55]">ETH_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1d]">EXTI0_IRQHandler</a> from exti.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3f]">EXTI15_10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1e]">EXTI1_IRQHandler</a> from exti.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1f]">EXTI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[20]">EXTI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[21]">EXTI4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2e]">EXTI9_5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1b]">FLASH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[68]">FPU_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[47]">FSMC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[67]">HASH_RNG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[f]">HardFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[37]">I2C1_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[36]">I2C1_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[39]">I2C2_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[38]">I2C2_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[60]">I2C3_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5f]">I2C3_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[10]">MemManage_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[e]">NMI_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5a]">OTG_FS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[41]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[62]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[61]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[64]">OTG_HS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[63]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[18]">PVD_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[15]">PendSV_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1c]">RCC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[40]">RTC_Alarm_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1a]">RTC_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4]">RampCalc</a> from ramp.o(.text) referenced 14 times from controltask.o(.data)
 <LI><a href="#[3]">RampInit</a> from ramp.o(.text) referenced 14 times from controltask.o(.data)
 <LI><a href="#[8]">RampIsOverflow</a> from ramp.o(.text) referenced 14 times from controltask.o(.data)
 <LI><a href="#[6]">RampResetCounter</a> from ramp.o(.text) referenced 14 times from controltask.o(.data)
 <LI><a href="#[5]">RampSetCounter</a> from ramp.o(.text) referenced 14 times from controltask.o(.data)
 <LI><a href="#[7]">RampSetScale</a> from ramp.o(.text) referenced 14 times from controltask.o(.data)
 <LI><a href="#[d]">Reset_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[48]">SDIO_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3a]">SPI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3b]">SPI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4a]">SPI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[13]">SVC_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[16]">SysTick_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6b]">SystemInit</a> from system_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[19]">TAMP_STAMP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2f]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[32]">TIM1_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[31]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[30]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[33]">TIM2_IRQHandler</a> from timer.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[34]">TIM3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[35]">TIM4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[49]">TIM5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4d]">TIM6_DAC_IRQHandler</a> from timer.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4e]">TIM7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[42]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[45]">TIM8_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[44]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[43]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4b]">UART4_IRQHandler</a> from uart4.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4c]">UART5_IRQHandler</a> from judge.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3c]">USART1_IRQHandler</a> from usart1.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3d]">USART2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3e]">USART3_IRQHandler</a> from ch100_dma.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5e]">USART6_IRQHandler</a> from hi220.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[12]">UsageFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[17]">WWDG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[6e]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[71]">device_to_host__frame__init</a> from recieve.pb-c.o(.text) referenced from recieve.pb-c.o(.constdata)
 <LI><a href="#[6d]">fputc</a> from retarget_io.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[72]">host_to_device__frame__init</a> from send.pb-c.o(.text) referenced from send.pb-c.o(.constdata)
 <LI><a href="#[69]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[b]">parse_signal</a> from auto_shoot_control_task.o(.text) referenced 2 times from auto_shoot_control_task.o(.data)
 <LI><a href="#[c]">parse_turret_command</a> from auto_shoot_control_task.o(.text) referenced 2 times from auto_shoot_control_task.o(.data)
 <LI><a href="#[6a]">pid_param_init</a> from pid.o(.text) referenced from pid.o(.text)
 <LI><a href="#[6f]">protobuf_c_buffer_simple_append</a> from protobuf-c.o(.text) referenced from protobuf-c.o(.constdata)
 <LI><a href="#[158]">protobuf_c_service_invoke_internal</a> from protobuf-c.o(.text) referenced from protobuf-c.o(.text)
 <LI><a href="#[a]">ramp_second_calc</a> from ramp_second.o(.text) referenced 2 times from remotetask.o(.data)
 <LI><a href="#[9]">ramp_second_init</a> from ramp_second.o(.text) referenced 2 times from remotetask.o(.data)
 <LI><a href="#[70]">signal__init</a> from signal.pb-c.o(.text) referenced from signal.pb-c.o(.constdata)
 <LI><a href="#[1]">system_alloc</a> from protobuf-c.o(.text) referenced 2 times from protobuf-c.o(.data)
 <LI><a href="#[2]">system_free</a> from protobuf-c.o(.text) referenced 2 times from protobuf-c.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[257]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[73]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[243]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[258]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[259]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[25a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[25b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[25c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[75]"></a>Hardware_WDI_Configuration</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[79]"></a>Buzzer_Configuration</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[7a]"></a>BSP_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = BSP_Init &rArr; ch100_USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch100_USART_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Configuration
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Start
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Configuration
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Configuration
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_Configuration
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Configuration
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Configuration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART5_InitConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>main</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = main &rArr; BSP_Init &rArr; ch100_USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteTaskInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_Micros
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControtLoopTaskInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7e]"></a>Led_Configuration</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Led_Configuration &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[7f]"></a>PWM_Configuration</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, gun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PWM_Configuration &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[85]"></a>CAN1_Configuration</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, can1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CAN1_Configuration &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_StructInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[9c]"></a>Set_Poke_Current</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, can1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Set_Poke_Current &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_bullet_handle
</UL>

<P><STRONG><a name="[9e]"></a>POWER_Control</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, can1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>

<P><STRONG><a name="[9f]"></a>sendcan1</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, can1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sendcan1 &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
</UL>

<P><STRONG><a name="[a0]"></a>sendcan2</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, can1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sendcan2 &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
</UL>

<P><STRONG><a name="[a1]"></a>sendcan3</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, can1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sendcan3 &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
</UL>

<P><STRONG><a name="[2a]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, can1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN1_TX_IRQHandler &rArr; CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, can1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; Can1ReceiveMsgProcess &rArr; EncoderProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1ReceiveMsgProcess
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>CAN2_Configuration</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, can2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CAN2_Configuration &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_StructInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[56]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, can2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN2_TX_IRQHandler &rArr; CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, can2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; Can2ReceiveMsgProcess &rArr; DistanceProcess &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2ReceiveMsgProcess
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>delay_ms</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hi220_Reconfig_EOUT
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hi220_Reconfig_SETPTL
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hi220_Reconfig_BAUD
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hi220_Reconfig_ODR
</UL>

<P><STRONG><a name="[25d]"></a>delay_us</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, delay.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>Delay_ms</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, delay.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>Delay_us</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, delay.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>Exti_Configuration</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, exti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[1d]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>Laser_Configuration</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, laser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Laser_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[ae]"></a>TIM8_Configuration</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateDisableConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>

<P><STRONG><a name="[7c]"></a>TIM6_Configuration</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM6_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[7d]"></a>TIM6_Start</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM6_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[b3]"></a>TIM4_Configuration</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateDisableConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>

<P><STRONG><a name="[b4]"></a>TIM2_Configuration</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>

<P><STRONG><a name="[33]"></a>TIM2_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; Control_Task &rArr; gimbal_task &rArr; auto_small_buff_handle &rArr; raw_data_to_pitch_angle &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>Get_Time_Micros</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>USART1_Configuration</STRONG> (Thumb, 298 bytes, Stack size 96 bytes, usart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USART1_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeCmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StructInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[3c]"></a>USART1_IRQHandler</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, usart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USART1_IRQHandler &rArr; RemoteDataPrcess &rArr; RemoteControlProcess &rArr; GimbalAngleLimit &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrentMemoryTarget
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteDataPrcess
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LostCounterFeed
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLostCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[260]"></a>USART1_GetRxBuf</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart1.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>BSP_FLASH_GetFlashSector</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, bsp_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_Write
</UL>

<P><STRONG><a name="[cf]"></a>BSP_FLASH_Write</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, bsp_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramByte
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DataCacheCmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_GetFlashSector
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppParamSave
</UL>

<P><STRONG><a name="[d6]"></a>BSP_FLASH_Read</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, bsp_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_ReadByte
</UL>

<P><STRONG><a name="[80]"></a>UART4_Configuration</STRONG> (Thumb, 426 bytes, Stack size 96 bytes, uart4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = UART4_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[4b]"></a>UART4_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, uart4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 892<LI>Call Chain = UART4_IRQHandler &rArr; targetOffsetDataDeal &rArr; process_general_message &rArr; host_to_device__frame__unpack &rArr; protobuf_c_message_unpack &rArr; parse_member &rArr; parse_oneof_member &rArr; parse_required_member &rArr;  protobuf_c_message_unpack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetOffsetDataDeal
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>Uart4DmaSendDataProc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uart4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart4DmaSendDataProc
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4SendBytesInfoProc
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4SendByteInfoProc
</UL>

<P><STRONG><a name="[26]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uart4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA1_Stream4_IRQHandler &rArr; DMA_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>Uart4SendByteInfoProc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uart4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4DmaSendDataProc
</UL>

<P><STRONG><a name="[df]"></a>Uart4SendBytesInfoProc</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, uart4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Uart4SendBytesInfoProc &rArr; Uart4DmaSendDataProc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4DmaSendDataProc
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_protocol
</UL>

<P><STRONG><a name="[e1]"></a>Get_CRC8_Check_Sum</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, judge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Get_CRC8_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc8
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC8_Check_Sum
</UL>

<P><STRONG><a name="[e0]"></a>Verify_CRC8_Check_Sum</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, judge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Verify_CRC8_Check_Sum &rArr; Get_CRC8_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC8_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgement_data_handle
</UL>

<P><STRONG><a name="[e2]"></a>Append_CRC8_Check_Sum</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, judge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Append_CRC8_Check_Sum &rArr; Get_CRC8_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC8_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_packet_pack
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_protocol
</UL>

<P><STRONG><a name="[e4]"></a>Get_CRC16_Check_Sum</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, judge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Get_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC16_Check_Sum
</UL>

<P><STRONG><a name="[e3]"></a>Verify_CRC16_Check_Sum</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, judge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Verify_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgement_data_handle
</UL>

<P><STRONG><a name="[e5]"></a>Append_CRC16_Check_Sum</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, judge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Append_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_packet_pack
</UL>

<P><STRONG><a name="[82]"></a>BSP_UART5_InitConfig</STRONG> (Thumb, 464 bytes, Stack size 96 bytes, judge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = BSP_UART5_InitConfig &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[e6]"></a>MYDMA_Enable</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, judge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MYDMA_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_upload_handle
</UL>

<P><STRONG><a name="[e7]"></a>judgement_data_handle</STRONG> (Thumb, 466 bytes, Stack size 48 bytes, judge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = judgement_data_handle &rArr; heat0_limit &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat0_limit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC16_Check_Sum
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC8_Check_Sum
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[4c]"></a>UART5_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, judge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = UART5_IRQHandler &rArr; judgement_data_handle &rArr; heat0_limit &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgement_data_handle
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>protocol_packet_pack</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, judge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = protocol_packet_pack &rArr; Append_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_upload_handle
</UL>

<P><STRONG><a name="[eb]"></a>data_upload_handle</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, judge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = data_upload_handle &rArr; protocol_packet_pack &rArr; Append_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_packet_pack
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Enable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_send_handle
</UL>

<P><STRONG><a name="[ec]"></a>get_crc8</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, judge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_crc8 &rArr; Get_CRC8_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC8_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_general_message
</UL>

<P><STRONG><a name="[8b]"></a>IWDG_Configuration</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iwdg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>rotate_point</STRONG> (Thumb, 290 bytes, Stack size 80 bytes, client.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[fb]"></a>Client_send_handle</STRONG> (Thumb, 11456 bytes, Stack size 32 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Client_send_handle &rArr; data_upload_handle &rArr; protocol_packet_pack &rArr; Append_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_upload_handle
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Task
</UL>

<P><STRONG><a name="[261]"></a>delete_Coverage</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, client.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>USART6_Configuration_For_Hi220</STRONG> (Thumb, 272 bytes, Stack size 96 bytes, hi220.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>

<P><STRONG><a name="[5e]"></a>USART6_IRQHandler</STRONG> (Thumb, 952 bytes, Stack size 32 bytes, hi220.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USART6_IRQHandler &rArr; crc16_update
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_update
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>Hi220_getYawPitchRoll</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hi220.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hi220_getYawPitchRoll
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LostCounterFeed
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLostCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[103]"></a>Hi220_Reconfig_ODR</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hi220.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hi220_Init
</UL>

<P><STRONG><a name="[105]"></a>Hi220_Reconfig_BAUD</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hi220.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hi220_Init
</UL>

<P><STRONG><a name="[106]"></a>Hi220_Reconfig_SETPTL</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hi220.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hi220_Init
</UL>

<P><STRONG><a name="[107]"></a>Hi220_Reconfig_EOUT</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hi220.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hi220_Init
</UL>

<P><STRONG><a name="[108]"></a>Hi220_Reset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hi220.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hi220_Init
</UL>

<P><STRONG><a name="[109]"></a>Hi220_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hi220.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hi220_Reset
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hi220_Reconfig_EOUT
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hi220_Reconfig_SETPTL
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hi220_Reconfig_BAUD
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hi220_Reconfig_ODR
</UL>

<P><STRONG><a name="[262]"></a>protobuf_c_version</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protobuf-c.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>protobuf_c_version_number</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protobuf-c.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>protobuf_c_buffer_simple_append</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = protobuf_c_buffer_simple_append &rArr; do_free
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_free
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_alloc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protobuf-c.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>protobuf_c_message_get_packed_size</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = protobuf_c_message_get_packed_size &rArr; oneof_field_get_packed_size &rArr; required_field_get_packed_size &rArr;  protobuf_c_message_get_packed_size (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_get_packed_size
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneof_field_get_packed_size
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optional_field_get_packed_size
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlabeled_field_get_packed_size
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_get_packed_size
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tag_size
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal__get_packed_size
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_get_packed_size
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_get_packed_size
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_to_device__frame__get_packed_size
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_to_host__frame__get_packed_size
</UL>

<P><STRONG><a name="[132]"></a>protobuf_c_message_pack</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = protobuf_c_message_pack &rArr; repeated_field_pack &rArr; required_field_pack &rArr; sint64_pack &rArr; uint64_pack &rArr; uint32_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneof_field_pack
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optional_field_pack
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlabeled_field_pack
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_pack
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unknown_field_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal__pack
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefixed_message_pack
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_to_device__frame__pack
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_to_host__frame__pack
</UL>

<P><STRONG><a name="[13b]"></a>protobuf_c_message_pack_to_buffer</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, protobuf-c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack_to_buffer
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneof_field_pack_to_buffer
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optional_field_pack_to_buffer
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlabeled_field_pack_to_buffer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_pack_to_buffer
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unknown_field_pack_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal__pack_to_buffer
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack_to_buffer
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_to_device__frame__pack_to_buffer
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_to_host__frame__pack_to_buffer
</UL>

<P><STRONG><a name="[144]"></a>protobuf_c_message_free_unpacked</STRONG> (Thumb, 618 bytes, Stack size 32 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + In Cycle
<LI>Call Chain = protobuf_c_message_free_unpacked &rArr;  protobuf_c_message_free_unpacked (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_free_unpacked
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_free
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal__free_unpacked
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_unpack
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_free_unpacked
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_required_member
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_oneof_member
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_to_host__frame__free_unpacked
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_to_device__frame__free_unpacked
</UL>

<P><STRONG><a name="[153]"></a>protobuf_c_message_init</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = protobuf_c_message_init
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_unpack
</UL>

<P><STRONG><a name="[152]"></a>protobuf_c_message_unpack</STRONG> (Thumb, 1216 bytes, Stack size 552 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = protobuf_c_message_unpack &rArr; parse_member &rArr; parse_oneof_member &rArr; parse_required_member &rArr;  protobuf_c_message_unpack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_free_unpacked
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_length_prefixed_data
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_free
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_alloc
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_init_generic
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_member
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_packable_type
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_packed_elements
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_tag_and_wiretype
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_range_lookup
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sizeof_elt_in_repeated_array
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal__unpack
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_required_member
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_to_host__frame__unpack
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_to_device__frame__unpack
</UL>

<P><STRONG><a name="[157]"></a>protobuf_c_message_check</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, protobuf-c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_check
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_check
</UL>

<P><STRONG><a name="[158]"></a>protobuf_c_service_invoke_internal</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = protobuf_c_service_invoke_internal &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stderr_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protobuf-c.o(.text)
</UL>
<P><STRONG><a name="[159]"></a>protobuf_c_service_generated_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, protobuf-c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[264]"></a>protobuf_c_service_destroy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, protobuf-c.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>protobuf_c_enum_descriptor_get_value_by_name</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, protobuf-c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[15c]"></a>protobuf_c_enum_descriptor_get_value</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, protobuf-c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_range_lookup
</UL>

<P><STRONG><a name="[15d]"></a>protobuf_c_message_descriptor_get_field_by_name</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, protobuf-c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[15e]"></a>protobuf_c_message_descriptor_get_field</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, protobuf-c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_range_lookup
</UL>

<P><STRONG><a name="[15f]"></a>protobuf_c_service_descriptor_get_method_by_name</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, protobuf-c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[165]"></a>abs_limit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc1
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc
</UL>

<P><STRONG><a name="[162]"></a>pid_calc</STRONG> (Thumb, 504 bytes, Stack size 40 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pid_calc &rArr; __hardfp_fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_limit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_twist_handle
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_gimbal_handle
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_follow_gimbal_handle
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_sup_handle
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_friction_handle
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_bullet_handle
</UL>

<P><STRONG><a name="[167]"></a>pid_calc1</STRONG> (Thumb, 502 bytes, Stack size 40 bytes, pid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_limit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>

<P><STRONG><a name="[1ee]"></a>PID_struct_init</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PID_struct_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shot_param_init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_param_init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_param_init
</UL>

<P><STRONG><a name="[1bf]"></a>pid_clr</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseShootControl
</UL>

<P><STRONG><a name="[70]"></a>signal__init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, signal.pb-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = signal__init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> signal.pb-c.o(.constdata)
</UL>
<P><STRONG><a name="[168]"></a>signal__get_packed_size</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, signal.pb-c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_get_packed_size
</UL>

<P><STRONG><a name="[169]"></a>signal__pack</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, signal.pb-c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_pack
</UL>

<P><STRONG><a name="[16a]"></a>signal__pack_to_buffer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, signal.pb-c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_pack_to_buffer
</UL>

<P><STRONG><a name="[16b]"></a>signal__unpack</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, signal.pb-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = signal__unpack &rArr; protobuf_c_message_unpack &rArr; parse_member &rArr; parse_oneof_member &rArr; parse_required_member &rArr;  protobuf_c_message_unpack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_signal
</UL>

<P><STRONG><a name="[16c]"></a>signal__free_unpacked</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, signal.pb-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = signal__free_unpacked &rArr; protobuf_c_message_free_unpacked &rArr;  protobuf_c_message_free_unpacked (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_free_unpacked
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_signal
</UL>

<P><STRONG><a name="[83]"></a>ch100_USART_Config</STRONG> (Thumb, 278 bytes, Stack size 96 bytes, ch100_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ch100_USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[170]"></a>CH100_getDATA</STRONG> (Thumb, 236 bytes, Stack size 0 bytes, ch100_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[3e]"></a>USART3_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ch100_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH100_getDATA
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>NMI_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_FAULTMASK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_FAULTMASK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[96]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exti_Configuration
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch100_USART_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Configuration
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Configuration
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Configuration
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Configuration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART5_InitConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Configuration_For_Hi220
</UL>

<P><STRONG><a name="[265]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>CAN_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Configuration
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Configuration
</UL>

<P><STRONG><a name="[99]"></a>CAN_Init</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Configuration
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Configuration
</UL>

<P><STRONG><a name="[9a]"></a>CAN_FilterInit</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Configuration
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Configuration
</UL>

<P><STRONG><a name="[98]"></a>CAN_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Configuration
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Configuration
</UL>

<P><STRONG><a name="[268]"></a>CAN_SlaveStartBank</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>CAN_DBGFreeze</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>CAN_TTComModeCmd</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>CAN_Transmit</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendcan3
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendcan2
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendcan1
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_Control
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Poke_Current
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CM_Speed
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Gimbal_Current
</UL>

<P><STRONG><a name="[26b]"></a>CAN_TransmitStatus</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>CAN_CancelTransmit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>CAN_Receive</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[26d]"></a>CAN_FIFORelease</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>CAN_MessagePending</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>CAN_OperatingModeRequest</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>CAN_Sleep</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>CAN_WakeUp</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>CAN_GetLastErrorCode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[273]"></a>CAN_GetReceiveErrorCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>CAN_GetLSBTransmitErrorCounter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>CAN_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Configuration
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Configuration
</UL>

<P><STRONG><a name="[275]"></a>CAN_GetFlagStatus</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>CAN_ClearFlag</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>CAN_GetITStatus</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>CAN_ClearITPendingBit</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Configuration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART5_InitConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Configuration_For_Hi220
</UL>

<P><STRONG><a name="[c0]"></a>DMA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch100_USART_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Configuration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART5_InitConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Configuration_For_Hi220
</UL>

<P><STRONG><a name="[bf]"></a>DMA_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Configuration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART5_InitConfig
</UL>

<P><STRONG><a name="[c3]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch100_USART_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Configuration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART5_InitConfig
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Configuration_For_Hi220
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Enable
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4DmaSendDataProc
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[276]"></a>DMA_PeriphIncOffsetSizeConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Enable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4DmaSendDataProc
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[c1]"></a>DMA_DoubleBufferModeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
</UL>

<P><STRONG><a name="[c2]"></a>DMA_DoubleBufferModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
</UL>

<P><STRONG><a name="[278]"></a>DMA_MemoryTargetConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>DMA_GetCurrentMemoryTarget</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Configuration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART5_InitConfig
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Enable
</UL>

<P><STRONG><a name="[279]"></a>DMA_GetFIFOStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>DMA_ClearFlag</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_upload_handle
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>DMA_ITConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Configuration
</UL>

<P><STRONG><a name="[27a]"></a>DMA_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[27b]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exti_Configuration
</UL>

<P><STRONG><a name="[27d]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[27e]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[280]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[281]"></a>FLASH_SetLatency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>FLASH_InstructionCacheCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>FLASH_DataCacheCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_Write
</UL>

<P><STRONG><a name="[284]"></a>FLASH_InstructionCacheReset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>FLASH_DataCacheReset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>FLASH_Unlock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_Write
</UL>

<P><STRONG><a name="[d5]"></a>FLASH_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_Write
</UL>

<P><STRONG><a name="[176]"></a>FLASH_GetStatus</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[175]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramByte
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Launch
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_RDPConfig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WRPConfig
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramDoubleWord
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllSectors
</UL>

<P><STRONG><a name="[d3]"></a>FLASH_EraseSector</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_Write
</UL>

<P><STRONG><a name="[177]"></a>FLASH_EraseAllSectors</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[178]"></a>FLASH_ProgramDoubleWord</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[179]"></a>FLASH_ProgramWord</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[17a]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[d4]"></a>FLASH_ProgramByte</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_Write
</UL>

<P><STRONG><a name="[286]"></a>FLASH_OB_Unlock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>FLASH_OB_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>FLASH_OB_WRPConfig</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[17c]"></a>FLASH_OB_RDPConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[17d]"></a>FLASH_OB_UserConfig</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[288]"></a>FLASH_OB_BORConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>FLASH_OB_Launch</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[289]"></a>FLASH_OB_GetUser</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>FLASH_OB_GetWRP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>FLASH_OB_GetRDP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>FLASH_OB_GetBOR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>FLASH_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>FLASH_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>GPIO_DeInit</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[77]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exti_Configuration
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch100_USART_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Configuration
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Configuration
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_Configuration
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Configuration
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Configuration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART5_InitConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Configuration
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_WDI_Configuration
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Configuration_For_Hi220
</UL>

<P><STRONG><a name="[b9]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
</UL>

<P><STRONG><a name="[290]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[292]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[294]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Configuration
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_TOGGLE
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseShootControl
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteShootControl
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[78]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Configuration
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_Configuration
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Configuration
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_WDI_Configuration
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_TOGGLE
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseShootControl
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteShootControl
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[295]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_TOGGLE
</UL>

<P><STRONG><a name="[8d]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch100_USART_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Configuration
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Configuration
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Configuration
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Configuration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART5_InitConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Configuration_For_Hi220
</UL>

<P><STRONG><a name="[297]"></a>RCC_DeInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[298]"></a>RCC_HSEConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[181]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[299]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[29b]"></a>RCC_LSEConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[29d]"></a>RCC_PLLConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[29f]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2a2]"></a>RCC_MCO1Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2a3]"></a>RCC_MCO2Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2a5]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>RCC_HCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>RCC_PCLK1Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>RCC_PCLK2Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[2a9]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2ac]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exti_Configuration
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch100_USART_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Configuration
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Configuration
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_Configuration
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Configuration
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Configuration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART5_InitConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Configuration
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_WDI_Configuration
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Configuration_For_Hi220
</UL>

<P><STRONG><a name="[2ad]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2ae]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch100_USART_Config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Configuration
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Configuration
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Configuration
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Configuration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART5_InitConfig
</UL>

<P><STRONG><a name="[a9]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_Configuration
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exti_Configuration
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Configuration_For_Hi220
</UL>

<P><STRONG><a name="[180]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[2af]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2b0]"></a>RCC_AHB3PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[184]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DeInit
</UL>

<P><STRONG><a name="[2b1]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2b2]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2b3]"></a>RCC_AHB3PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2b5]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2b6]"></a>RCC_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2b7]"></a>RCC_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2b8]"></a>RCC_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2b9]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>SYSCFG_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[2ba]"></a>SYSCFG_MemoryRemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f4xx_syscfg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exti_Configuration
</UL>

<P><STRONG><a name="[2bb]"></a>SYSCFG_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[2bc]"></a>SYSCFG_CompensationCellCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>SYSCFG_GetCompensationCellStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>TIM_DeInit</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[8f]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_Configuration
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Configuration
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
</UL>

<P><STRONG><a name="[2be]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_Configuration
</UL>

<P><STRONG><a name="[2bf]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c0]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c1]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c2]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c3]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_Configuration
</UL>

<P><STRONG><a name="[2c4]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_Configuration
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
</UL>

<P><STRONG><a name="[2c5]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_Configuration
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Start
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
</UL>

<P><STRONG><a name="[2c7]"></a>TIM_OC1Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c8]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>TIM_OC3Init</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
</UL>

<P><STRONG><a name="[92]"></a>TIM_OC4Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
</UL>

<P><STRONG><a name="[2c9]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ca]"></a>TIM_SelectOCxM</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cb]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cc]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cf]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d4]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
</UL>

<P><STRONG><a name="[93]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
</UL>

<P><STRONG><a name="[2d5]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d6]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d8]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d9]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2db]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2dc]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2df]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e3]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e4]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e5]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[18c]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[18a]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[188]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[186]"></a>TIM_ICInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
</UL>

<P><STRONG><a name="[2e6]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
</UL>

<P><STRONG><a name="[2e7]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e8]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ea]"></a>TIM_GetCapture4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2eb]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ec]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ee]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ef]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Start
</UL>

<P><STRONG><a name="[2f0]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f1]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Start
</UL>

<P><STRONG><a name="[b5]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[2f2]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f5]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[190]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[192]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[194]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[193]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[195]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[2f6]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f9]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>TIM_RemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>USART_DeInit</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Configuration_For_Hi220
</UL>

<P><STRONG><a name="[bc]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch100_USART_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Configuration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART5_InitConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Configuration_For_Hi220
</UL>

<P><STRONG><a name="[bb]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
</UL>

<P><STRONG><a name="[2fc]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2fd]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch100_USART_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Configuration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART5_InitConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Configuration_For_Hi220
</UL>

<P><STRONG><a name="[2fe]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2ff]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[300]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[302]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[304]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[306]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[309]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[30b]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[30c]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[30d]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch100_USART_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Configuration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART5_InitConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Configuration_For_Hi220
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_upload_handle
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[c4]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch100_USART_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Configuration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART5_InitConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Configuration_For_Hi220
</UL>

<P><STRONG><a name="[30e]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch100_USART_Config
</UL>

<P><STRONG><a name="[c6]"></a>USART_GetITStatus</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[30f]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, system_stm32f4xx.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[ee]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[ef]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[f0]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Task
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[f1]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[310]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>SetWorkState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, controltask.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControtLoopTaskInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteDataPrcess
</UL>

<P><STRONG><a name="[1d4]"></a>GetWorkState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, controltask.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2ReceiveMsgProcess
</UL>

<P><STRONG><a name="[b8]"></a>Control_Task</STRONG> (Thumb, 680 bytes, Stack size 24 bytes, controltask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = Control_Task &rArr; gimbal_task &rArr; auto_small_buff_handle &rArr; raw_data_to_pitch_angle &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_send_handle
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shot_task
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_protocol
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_switch_task
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_karman_filter_calc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoshoot_karman_filter_calc
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperviseTask
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>ControtLoopTaskInit</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, controltask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ControtLoopTaskInit &rArr; shot_param_init &rArr; PID_struct_init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LostCounterFeed
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLostCounter
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shot_param_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_param_init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_param_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppParamInit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkState
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[311]"></a>Is_AppParam_Calied</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iotask.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>AppParamInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, iotask.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControtLoopTaskInit
</UL>

<P><STRONG><a name="[1a6]"></a>SetGimbalCaliData</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, iotask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppParamSave
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateLoop
</UL>

<P><STRONG><a name="[1a7]"></a>SetGyroCaliData</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iotask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppParamSave
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateLoop
</UL>

<P><STRONG><a name="[1a8]"></a>SetAccCaliData</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, iotask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppParamSave
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1a9]"></a>SetMagCaliData</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, iotask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppParamSave
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateLoop
</UL>

<P><STRONG><a name="[1aa]"></a>SetPIDCaliData</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, iotask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppParamSave
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateLoop
</UL>

<P><STRONG><a name="[312]"></a>GetGimbalCaliData</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, iotask.o(.text), UNUSED)

<P><STRONG><a name="[313]"></a>GetGyroCaliData</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, iotask.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>GetAccCaliData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iotask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1ac]"></a>GetMagCaliData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iotask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[314]"></a>IsGimbalCalied</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, iotask.o(.text), UNUSED)

<P><STRONG><a name="[315]"></a>IsGyroCalied</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, iotask.o(.text), UNUSED)

<P><STRONG><a name="[316]"></a>IsAccCalied</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, iotask.o(.text), UNUSED)

<P><STRONG><a name="[317]"></a>IsMagCalied</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, iotask.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>SetCaliCmdFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iotask.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>ResetCaliCmdFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iotask.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateLoop
</UL>

<P><STRONG><a name="[319]"></a>GetCaliCmdFlagGrp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iotask.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>IsCaliCmdFlagSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, iotask.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateLoop
</UL>

<P><STRONG><a name="[1b4]"></a>Sensor_Offset_Param_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, iotask.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateLoop
</UL>

<P><STRONG><a name="[1ad]"></a>MagEndCaliProcess</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, iotask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Lost_Error_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateLoop
</UL>

<P><STRONG><a name="[1b5]"></a>MagStartCaliProcess</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iotask.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateLoop
</UL>

<P><STRONG><a name="[1af]"></a>GimbalCaliProcess</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, iotask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Lost_Error_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateLoop
</UL>

<P><STRONG><a name="[1b0]"></a>GyroCaliProcess</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, iotask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Lost_Error_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateLoop
</UL>

<P><STRONG><a name="[1b1]"></a>CalibrateLoop</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, iotask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCaliProcess
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalCaliProcess
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagStartCaliProcess
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagEndCaliProcess
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Offset_Param_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCaliCmdFlagSet
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCaliCmdFlag
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPIDCaliData
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMagCaliData
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGyroCaliData
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGimbalCaliData
</UL>

<P><STRONG><a name="[31a]"></a>PIDCaliProcess</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, iotask.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>GetRemoteSwitchAction</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, remotetask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetRemoteSwitchAction
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Rotate_Reverse_Control
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteShootControl
</UL>

<P><STRONG><a name="[1b6]"></a>IsRemoteBeingAction</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, remotetask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>

<P><STRONG><a name="[1c6]"></a>SetInputMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, remotetask.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteDataPrcess
</UL>

<P><STRONG><a name="[1c7]"></a>GetInputMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, remotetask.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteDataPrcess
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_is_controllable
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_is_controllable
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chassis_mode
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gimbal_mode
</UL>

<P><STRONG><a name="[1b9]"></a>SetShootState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, remotetask.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseShootControl
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteShootControl
</UL>

<P><STRONG><a name="[1b7]"></a>RemoteShootControl</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, remotetask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RemoteShootControl &rArr; GetRemoteSwitchAction
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetShootState
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRemoteSwitchAction
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControlProcess
</UL>

<P><STRONG><a name="[1ba]"></a>Remote_Rotate_Reverse_Control</STRONG> (Thumb, 792 bytes, Stack size 32 bytes, remotetask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRemoteSwitchAction
</UL>

<P><STRONG><a name="[1bd]"></a>Mouse_Key_Rotate_Reverse_Control</STRONG> (Thumb, 1608 bytes, Stack size 24 bytes, remotetask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Mouse_Key_Rotate_Reverse_Control &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseKeyControlProcess
</UL>

<P><STRONG><a name="[1c3]"></a>auto_angle_control</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, remotetask.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseKeyControlProcess
</UL>

<P><STRONG><a name="[1be]"></a>MouseShootControl</STRONG> (Thumb, 632 bytes, Stack size 16 bytes, remotetask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MouseShootControl
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_clr
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetShootState
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseKeyControlProcess
</UL>

<P><STRONG><a name="[1c0]"></a>GimbalAngleLimit</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, remotetask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GimbalAngleLimit &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControlProcess
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseKeyControlProcess
</UL>

<P><STRONG><a name="[1c4]"></a>SoftReset</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, remotetask.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseKeyControlProcess
</UL>

<P><STRONG><a name="[1c2]"></a>MouseKeyControlProcess</STRONG> (Thumb, 1184 bytes, Stack size 16 bytes, remotetask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MouseKeyControlProcess &rArr; GimbalAngleLimit &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftReset
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalAngleLimit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseShootControl
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_angle_control
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_Key_Rotate_Reverse_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteDataPrcess
</UL>

<P><STRONG><a name="[1c5]"></a>RemoteControlProcess</STRONG> (Thumb, 518 bytes, Stack size 40 bytes, remotetask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RemoteControlProcess &rArr; GimbalAngleLimit &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalAngleLimit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteShootControl
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteDataPrcess
</UL>

<P><STRONG><a name="[ca]"></a>RemoteDataPrcess</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, remotetask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RemoteDataPrcess &rArr; RemoteControlProcess &rArr; GimbalAngleLimit &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControlProcess
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseKeyControlProcess
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputMode
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetInputMode
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkState
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[31b]"></a>GetShootingState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, remotetask.o(.text), UNUSED)

<P><STRONG><a name="[31c]"></a>SetShootingState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, remotetask.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>GetShootState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, remotetask.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_bullet_handle
</UL>

<P><STRONG><a name="[31d]"></a>GetFrictionState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, remotetask.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>SetFrictionState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, remotetask.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteTaskInit
</UL>

<P><STRONG><a name="[89]"></a>RemoteTaskInit</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, remotetask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RemoteTaskInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFrictionState
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ca]"></a>mouse_read</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, remotetask.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouse_scan
</UL>

<P><STRONG><a name="[1c9]"></a>mouse_scan</STRONG> (Thumb, 226 bytes, Stack size 4 bytes, remotetask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouse_read
</UL>

<P><STRONG><a name="[1cc]"></a>keyboard_read</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, remotetask.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_scan
</UL>

<P><STRONG><a name="[1cb]"></a>keyboard_scan</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, remotetask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_read
</UL>

<P><STRONG><a name="[1cd]"></a>remotecontrolangle</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, remotetask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = remotecontrolangle &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
</UL>

<P><STRONG><a name="[1d0]"></a>DistanceProcess</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, canbustask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DistanceProcess &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2ReceiveMsgProcess
</UL>

<P><STRONG><a name="[1d5]"></a>GetEncoderBias</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, canbustask.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1ReceiveMsgProcess
</UL>

<P><STRONG><a name="[1d1]"></a>EncoderProcess</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, canbustask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EncoderProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1ReceiveMsgProcess
</UL>

<P><STRONG><a name="[1d2]"></a>PitchEncoderProcess</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, canbustask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PitchEncoderProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2ReceiveMsgProcess
</UL>

<P><STRONG><a name="[1d3]"></a>CapacitanceProcess1</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, canbustask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[31e]"></a>CapacitanceProcess2</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, canbustask.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>Can2ReceiveMsgProcess</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, canbustask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Can2ReceiveMsgProcess &rArr; DistanceProcess &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LostCounterFeed
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLostCounter
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PitchEncoderProcess
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DistanceProcess
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkState
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>Can1ReceiveMsgProcess</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, canbustask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Can1ReceiveMsgProcess &rArr; EncoderProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LostCounterFeed
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLostCounter
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderProcess
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEncoderBias
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[1d6]"></a>Set_Gimbal_Current</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, canbustask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Set_Gimbal_Current &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[1d7]"></a>Set_CM_Speed</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, canbustask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Set_CM_Speed &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_friction_handle
</UL>

<P><STRONG><a name="[1d8]"></a>LED_TOGGLE</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, supervisetask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_TOGGLE
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperviseTask
</UL>

<P><STRONG><a name="[1db]"></a>Get_Lost_Error</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, supervisetask.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Lost_Error_Set
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperviseTask
</UL>

<P><STRONG><a name="[cb]"></a>GetLostCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, supervisetask.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2ReceiveMsgProcess
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1ReceiveMsgProcess
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControtLoopTaskInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hi220_getYawPitchRoll
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperviseTask
</UL>

<P><STRONG><a name="[19d]"></a>SuperviseTask</STRONG> (Thumb, 432 bytes, Stack size 16 bytes, supervisetask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SuperviseTask &rArr; LED_TOGGLE
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LostCounterFeed
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLostCounter
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LostCounterOverflowCheck
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LostCounterCount
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Lost_Error
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_TOGGLE
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Task
</UL>

<P><STRONG><a name="[31f]"></a>Set_Error_Flag</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, supervisetask.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>Is_Lost_Error_Set</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, supervisetask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Is_Lost_Error_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Lost_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_is_controllable
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_is_controllable
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Serious_Error
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCaliProcess
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalCaliProcess
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagEndCaliProcess
</UL>

<P><STRONG><a name="[1dc]"></a>Is_Serious_Error</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, supervisetask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Lost_Error_Set
</UL>

<P><STRONG><a name="[19a]"></a>mode_switch_task</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, modeswitch_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mode_switch_task &rArr; get_gimbal_mode &rArr; gimbal_back_param
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chassis_mode
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gimbal_mode
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_global_last_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Task
</UL>

<P><STRONG><a name="[1e3]"></a>gimbal_is_controllable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, modeswitch_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gimbal_is_controllable &rArr; Is_Lost_Error_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputMode
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Lost_Error_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[1e4]"></a>chassis_is_controllable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, modeswitch_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = chassis_is_controllable &rArr; Is_Lost_Error_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputMode
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Lost_Error_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
</UL>

<P><STRONG><a name="[1f0]"></a>auto_aim_cascade_pid_ctrl</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gimbal_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[1e5]"></a>gimbal_follow_change_dirction</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, gimbal_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gimbal_follow_change_dirction &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[1e6]"></a>gimbal_follow_chassis_handle</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, gimbal_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gimbal_follow_chassis_handle &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[1e7]"></a>auto_angle_handle</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, gimbal_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = auto_angle_handle &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[1e8]"></a>raw_data_to_pitch_angle</STRONG> (Thumb, 854 bytes, Stack size 160 bytes, gimbal_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = raw_data_to_pitch_angle &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_small_buff_handle
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_big_buff_handle
</UL>

<P><STRONG><a name="[1ea]"></a>auto_big_buff_handle</STRONG> (Thumb, 994 bytes, Stack size 40 bytes, gimbal_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = auto_big_buff_handle &rArr; raw_data_to_pitch_angle &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_data_to_pitch_angle
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[1eb]"></a>auto_small_buff_handle</STRONG> (Thumb, 968 bytes, Stack size 40 bytes, gimbal_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = auto_small_buff_handle &rArr; raw_data_to_pitch_angle &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_data_to_pitch_angle
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[19b]"></a>gimbal_task</STRONG> (Thumb, 2772 bytes, Stack size 40 bytes, gimbal_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = gimbal_task &rArr; auto_small_buff_handle &rArr; raw_data_to_pitch_angle &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_struct_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hi220_getYawPitchRoll
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH100_getDATA
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mode_handle
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_loop_handle
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cascade_pid_ctrl
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_is_controllable
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Gimbal_Current
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_small_buff_handle
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_big_buff_handle
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_angle_handle
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_follow_chassis_handle
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_follow_change_dirction
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_aim_cascade_pid_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Task
</UL>

<P><STRONG><a name="[320]"></a>no_action_handle</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gimbal_task.o(.text), UNUSED)

<P><STRONG><a name="[321]"></a>Filter_for_Speed_Prediction</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, gimbal_task.o(.text), UNUSED)

<P><STRONG><a name="[322]"></a>AutoShootAngleLimit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gimbal_task.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>gimbal_param_init</STRONG> (Thumb, 608 bytes, Stack size 8 bytes, gimbal_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gimbal_param_init &rArr; PID_struct_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_struct_init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControtLoopTaskInit
</UL>

<P><STRONG><a name="[1df]"></a>gimbal_back_param</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gimbal_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gimbal_back_param
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gimbal_mode
</UL>

<P><STRONG><a name="[323]"></a>AvgFilter</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gimbal_task.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>shoot_friction_handle</STRONG> (Thumb, 330 bytes, Stack size 8 bytes, shoot_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shoot_friction_handle &rArr; Set_CM_Speed &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CM_Speed
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shot_task
</UL>

<P><STRONG><a name="[1f8]"></a>Heat0_switch</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, shoot_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_performance
</UL>

<P><STRONG><a name="[1f7]"></a>Speed_switch</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, shoot_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_performance
</UL>

<P><STRONG><a name="[1f6]"></a>Mode_switch</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, shoot_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_performance
</UL>

<P><STRONG><a name="[1f5]"></a>System_performance</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, shoot_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = System_performance
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_switch
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_switch
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat0_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shot_task
</UL>

<P><STRONG><a name="[19c]"></a>shot_task</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, shoot_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = shot_task &rArr; shoot_bullet_handle &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_performance
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_friction_handle
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_bullet_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Task
</UL>

<P><STRONG><a name="[e9]"></a>heat0_limit</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, shoot_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = heat0_limit &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgement_data_handle
</UL>

<P><STRONG><a name="[1a4]"></a>shot_param_init</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, shoot_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = shot_param_init &rArr; PID_struct_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_struct_init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControtLoopTaskInit
</UL>

<P><STRONG><a name="[19e]"></a>chassis_task</STRONG> (Thumb, 894 bytes, Stack size 40 bytes, chassis_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = chassis_task &rArr; remotecontrolangle &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendcan3
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendcan2
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendcan1
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_is_controllable
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remotecontrolangle
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_twist_handle
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_gimbal_handle
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_follow_gimbal_handle
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_follow_gimbal_handle
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;separate_gimbal_handle
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_sup_handle
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_stop_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Task
</UL>

<P><STRONG><a name="[324]"></a>get_max_power</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, chassis_task.o(.text), UNUSED)

<P><STRONG><a name="[325]"></a>Check_Vcap_recieve</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, chassis_task.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>chassis_param_init</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, chassis_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = chassis_param_init &rArr; PID_struct_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_struct_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControtLoopTaskInit
</UL>

<P><STRONG><a name="[200]"></a>process_general_message</STRONG> (Thumb, 616 bytes, Stack size 24 bytes, auto_shoot_control_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 868<LI>Call Chain = process_general_message &rArr; host_to_device__frame__unpack &rArr; protobuf_c_message_unpack &rArr; parse_member &rArr; parse_oneof_member &rArr; parse_required_member &rArr;  protobuf_c_message_unpack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc8
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_to_device__frame__unpack
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_to_device__frame__free_unpacked
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetOffsetDataDeal
</UL>

<P><STRONG><a name="[da]"></a>targetOffsetDataDeal</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, auto_shoot_control_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 884<LI>Call Chain = targetOffsetDataDeal &rArr; process_general_message &rArr; host_to_device__frame__unpack &rArr; protobuf_c_message_unpack &rArr; parse_member &rArr; parse_oneof_member &rArr; parse_required_member &rArr;  protobuf_c_message_unpack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_general_message
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[b]"></a>parse_signal</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, auto_shoot_control_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 860<LI>Call Chain = parse_signal &rArr; signal__unpack &rArr; protobuf_c_message_unpack &rArr; parse_member &rArr; parse_oneof_member &rArr; parse_required_member &rArr;  protobuf_c_message_unpack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal__free_unpacked
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal__unpack
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auto_shoot_control_task.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>parse_turret_command</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, auto_shoot_control_task.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> auto_shoot_control_task.o(.data)
</UL>
<P><STRONG><a name="[19f]"></a>send_protocol</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, auto_shoot_control_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = send_protocol &rArr; device_to_host__frame__pack &rArr; protobuf_c_message_pack &rArr; repeated_field_pack &rArr; required_field_pack &rArr; sint64_pack &rArr; uint64_pack &rArr; uint32_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4SendBytesInfoProc
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_to_host__frame__pack
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_to_host__frame__init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_to_host__frame__get_packed_size
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Task
</UL>

<P><STRONG><a name="[9]"></a>ramp_second_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ramp_second.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> remotetask.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>ramp_second_calc</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ramp_second.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> remotetask.o(.data)
</UL>
<P><STRONG><a name="[205]"></a>buff_karman_filter_Init</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, buff_karman_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = buff_karman_filter_Init &rArr; arm_mat_trans_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_trans_f32
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_init_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_karman_filter_calc
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_kalman_filter_reset
</UL>

<P><STRONG><a name="[198]"></a>buff_karman_filter_calc</STRONG> (Thumb, 476 bytes, Stack size 96 bytes, buff_karman_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = buff_karman_filter_calc &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_copy_f32
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_karman_filter_Init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_sub_f32
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_inverse_f32
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_init_f32
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Task
</UL>

<P><STRONG><a name="[20d]"></a>buff_kalman_filter_reset</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, buff_karman_filter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_karman_filter_Init
</UL>

<P><STRONG><a name="[20e]"></a>autoshoot_karman_filter_Init</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, autoshoot_karman_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = autoshoot_karman_filter_Init &rArr; arm_mat_trans_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_trans_f32
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_init_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoshoot_karman_filter_calc
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoshoot_kalman_filter_reset
</UL>

<P><STRONG><a name="[20f]"></a>autoshoot_kalman_filter_reset</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, autoshoot_karman_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = autoshoot_kalman_filter_reset &rArr; autoshoot_karman_filter_Init &rArr; arm_mat_trans_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoshoot_karman_filter_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoshoot_karman_filter_calc
</UL>

<P><STRONG><a name="[199]"></a>autoshoot_karman_filter_calc</STRONG> (Thumb, 590 bytes, Stack size 104 bytes, autoshoot_karman_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = autoshoot_karman_filter_calc &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoshoot_kalman_filter_reset
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoshoot_karman_filter_Init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_copy_f32
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_sub_f32
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_inverse_f32
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_init_f32
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Task
</UL>

<P><STRONG><a name="[71]"></a>device_to_host__frame__init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, recieve.pb-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = device_to_host__frame__init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_protocol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> recieve.pb-c.o(.constdata)
</UL>
<P><STRONG><a name="[204]"></a>device_to_host__frame__get_packed_size</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, recieve.pb-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = device_to_host__frame__get_packed_size &rArr; protobuf_c_message_get_packed_size &rArr; oneof_field_get_packed_size &rArr; required_field_get_packed_size &rArr;  protobuf_c_message_get_packed_size (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_get_packed_size
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_protocol
</UL>

<P><STRONG><a name="[203]"></a>device_to_host__frame__pack</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, recieve.pb-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = device_to_host__frame__pack &rArr; protobuf_c_message_pack &rArr; repeated_field_pack &rArr; required_field_pack &rArr; sint64_pack &rArr; uint64_pack &rArr; uint32_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_protocol
</UL>

<P><STRONG><a name="[210]"></a>device_to_host__frame__pack_to_buffer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, recieve.pb-c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_pack_to_buffer
</UL>

<P><STRONG><a name="[211]"></a>device_to_host__frame__unpack</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, recieve.pb-c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_unpack
</UL>

<P><STRONG><a name="[212]"></a>device_to_host__frame__free_unpacked</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, recieve.pb-c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_free_unpacked
</UL>

<P><STRONG><a name="[72]"></a>host_to_device__frame__init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, send.pb-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = host_to_device__frame__init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> send.pb-c.o(.constdata)
</UL>
<P><STRONG><a name="[213]"></a>host_to_device__frame__get_packed_size</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, send.pb-c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_get_packed_size
</UL>

<P><STRONG><a name="[214]"></a>host_to_device__frame__pack</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, send.pb-c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_pack
</UL>

<P><STRONG><a name="[215]"></a>host_to_device__frame__pack_to_buffer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, send.pb-c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_pack_to_buffer
</UL>

<P><STRONG><a name="[201]"></a>host_to_device__frame__unpack</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, send.pb-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = host_to_device__frame__unpack &rArr; protobuf_c_message_unpack &rArr; parse_member &rArr; parse_oneof_member &rArr; parse_required_member &rArr;  protobuf_c_message_unpack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_general_message
</UL>

<P><STRONG><a name="[202]"></a>host_to_device__frame__free_unpacked</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, send.pb-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = host_to_device__frame__free_unpacked &rArr; protobuf_c_message_free_unpacked &rArr;  protobuf_c_message_free_unpacked (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_free_unpacked
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_general_message
</UL>

<P><STRONG><a name="[20a]"></a>arm_mat_add_f32</STRONG> (Thumb, 110 bytes, Stack size 28 bytes, matrixfunctions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = arm_mat_add_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_karman_filter_calc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoshoot_karman_filter_calc
</UL>

<P><STRONG><a name="[326]"></a>arm_mat_add_q15</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>arm_mat_add_q31</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>arm_mat_cmplx_mult_f32</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[329]"></a>arm_mat_cmplx_mult_q15</STRONG> (Thumb, 574 bytes, Stack size 104 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>arm_mat_cmplx_mult_q31</STRONG> (Thumb, 372 bytes, Stack size 96 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[206]"></a>arm_mat_init_f32</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, matrixfunctions.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_karman_filter_calc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoshoot_karman_filter_calc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoshoot_karman_filter_Init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_karman_filter_Init
</UL>

<P><STRONG><a name="[32b]"></a>arm_mat_init_q15</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[32c]"></a>arm_mat_init_q31</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>arm_mat_inverse_f32</STRONG> (Thumb, 670 bytes, Stack size 76 bytes, matrixfunctions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = arm_mat_inverse_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_karman_filter_calc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoshoot_karman_filter_calc
</UL>

<P><STRONG><a name="[216]"></a>arm_mat_inverse_f64</STRONG> (Thumb, 886 bytes, Stack size 128 bytes, matrixfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[217]"></a>arm_mat_mult_f64</STRONG> (Thumb, 360 bytes, Stack size 112 bytes, matrixfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[208]"></a>arm_mat_mult_f32</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, matrixfunctions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arm_mat_mult_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_karman_filter_calc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoshoot_karman_filter_calc
</UL>

<P><STRONG><a name="[32d]"></a>arm_mat_mult_fast_q15</STRONG> (Thumb, 1162 bytes, Stack size 116 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[32e]"></a>arm_mat_mult_fast_q31</STRONG> (Thumb, 594 bytes, Stack size 104 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[32f]"></a>arm_mat_mult_q7</STRONG> (Thumb, 258 bytes, Stack size 60 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[330]"></a>arm_mat_mult_q15</STRONG> (Thumb, 600 bytes, Stack size 128 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>arm_mat_mult_q31</STRONG> (Thumb, 308 bytes, Stack size 72 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[332]"></a>arm_mat_scale_f32</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[333]"></a>arm_mat_scale_q15</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[334]"></a>arm_mat_scale_q31</STRONG> (Thumb, 110 bytes, Stack size 36 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>arm_mat_sub_f64</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, matrixfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[20c]"></a>arm_mat_sub_f32</STRONG> (Thumb, 110 bytes, Stack size 28 bytes, matrixfunctions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = arm_mat_sub_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_karman_filter_calc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoshoot_karman_filter_calc
</UL>

<P><STRONG><a name="[335]"></a>arm_mat_sub_q15</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[336]"></a>arm_mat_sub_q31</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>arm_mat_trans_f32</STRONG> (Thumb, 98 bytes, Stack size 36 bytes, matrixfunctions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = arm_mat_trans_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoshoot_karman_filter_Init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_karman_filter_Init
</UL>

<P><STRONG><a name="[337]"></a>arm_mat_trans_f64</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[338]"></a>arm_mat_trans_q7</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[339]"></a>arm_mat_trans_q15</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[33a]"></a>arm_mat_trans_q31</STRONG> (Thumb, 98 bytes, Stack size 36 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[33b]"></a>arm_mat_vec_mult_f32</STRONG> (Thumb, 384 bytes, Stack size 52 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[33c]"></a>arm_mat_vec_mult_q31</STRONG> (Thumb, 468 bytes, Stack size 112 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[33d]"></a>arm_mat_vec_mult_q15</STRONG> (Thumb, 1054 bytes, Stack size 128 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[33e]"></a>arm_mat_vec_mult_q7</STRONG> (Thumb, 914 bytes, Stack size 84 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[33f]"></a>arm_mat_cmplx_trans_f32</STRONG> (Thumb, 122 bytes, Stack size 36 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[340]"></a>arm_mat_cmplx_trans_q31</STRONG> (Thumb, 122 bytes, Stack size 36 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[341]"></a>arm_mat_cmplx_trans_q15</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>arm_mat_cholesky_f64</STRONG> (Thumb, 396 bytes, Stack size 56 bytes, matrixfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[21a]"></a>arm_mat_cholesky_f32</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, matrixfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>

<P><STRONG><a name="[342]"></a>arm_mat_solve_upper_triangular_f32</STRONG> (Thumb, 210 bytes, Stack size 36 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[343]"></a>arm_mat_solve_lower_triangular_f32</STRONG> (Thumb, 210 bytes, Stack size 36 bytes, matrixfunctions.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>arm_mat_solve_upper_triangular_f64</STRONG> (Thumb, 332 bytes, Stack size 72 bytes, matrixfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[21d]"></a>arm_mat_solve_lower_triangular_f64</STRONG> (Thumb, 314 bytes, Stack size 72 bytes, matrixfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[21e]"></a>arm_mat_ldlt_f32</STRONG> (Thumb, 666 bytes, Stack size 72 bytes, matrixfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>

<P><STRONG><a name="[21f]"></a>arm_mat_ldlt_f64</STRONG> (Thumb, 804 bytes, Stack size 96 bytes, matrixfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>

<P><STRONG><a name="[344]"></a>arm_barycenter_f32</STRONG> (Thumb, 132 bytes, Stack size 28 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>arm_bitonic_sort_f32</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bitonic_sort_core_f32
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sort_f32
</UL>

<P><STRONG><a name="[222]"></a>arm_bubble_sort_f32</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sort_f32
</UL>

<P><STRONG><a name="[209]"></a>arm_copy_f32</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, supportfunctions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arm_copy_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_karman_filter_calc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoshoot_karman_filter_calc
</UL>

<P><STRONG><a name="[345]"></a>arm_copy_q15</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[346]"></a>arm_copy_q31</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[347]"></a>arm_copy_q7</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[348]"></a>arm_fill_f32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[349]"></a>arm_fill_q15</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[34a]"></a>arm_fill_q31</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[34b]"></a>arm_fill_q7</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>arm_heap_sort_f32</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_heapify
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sort_f32
</UL>

<P><STRONG><a name="[225]"></a>arm_insertion_sort_f32</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sort_f32
</UL>

<P><STRONG><a name="[228]"></a>arm_merge_sort_f32</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_merge_sort_core_f32
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[34c]"></a>arm_merge_sort_init_f32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>arm_quick_sort_f32</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_quick_sort_core_f32
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sort_f32
</UL>

<P><STRONG><a name="[22c]"></a>arm_selection_sort_f32</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sort_f32
</UL>

<P><STRONG><a name="[22d]"></a>arm_sort_f32</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_selection_sort_f32
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_quick_sort_f32
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_insertion_sort_f32
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_heap_sort_f32
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bubble_sort_f32
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bitonic_sort_f32
</UL>

<P><STRONG><a name="[34d]"></a>arm_sort_init_f32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[34e]"></a>arm_weighted_sum_f32</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[34f]"></a>arm_float_to_q15</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>arm_float_to_q31</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2lz
</UL>

<P><STRONG><a name="[350]"></a>arm_float_to_q7</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[351]"></a>arm_q15_to_float</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[352]"></a>arm_q15_to_q31</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[353]"></a>arm_q15_to_q7</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[354]"></a>arm_q31_to_float</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[355]"></a>arm_q31_to_q15</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[356]"></a>arm_q31_to_q7</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[357]"></a>arm_q7_to_float</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[358]"></a>arm_q7_to_q15</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[359]"></a>arm_q7_to_q31</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>ITM_SendChar</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, retarget_io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stderr_putchar
</UL>

<P><STRONG><a name="[35a]"></a>ITM_ReceiveChar</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, retarget_io.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, retarget_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fputc &rArr; stderr_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stderr_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[35b]"></a>fgetc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget_io.o(.text), UNUSED)

<P><STRONG><a name="[35c]"></a>__backspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget_io.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>abort</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget_io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_assert</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, retarget_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stderr_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal__free_unpacked
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal__pack_to_buffer
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal__pack
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal__get_packed_size
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_service_generated_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_service_invoke_internal
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_unpack
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_free_unpacked
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_pack_to_buffer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_pack
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_get_packed_size
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_member
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_packed_repeated_member
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack_to_buffer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_pack_to_buffer
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_packed_payload_length
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_buffer_packed_payload
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_pack
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sizeof_elt_in_repeated_array
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_get_packed_size
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_to_device__frame__pack_to_buffer
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_to_device__frame__pack
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_to_device__frame__get_packed_size
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_to_host__frame__free_unpacked
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_to_host__frame__pack_to_buffer
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_to_device__frame__free_unpacked
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_to_host__frame__pack
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_to_host__frame__get_packed_size
</UL>

<P><STRONG><a name="[ce]"></a>FIFO_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fifo.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_FIFO_Init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Create
</UL>

<P><STRONG><a name="[234]"></a>FIFO_Create</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[235]"></a>FIFO_Destory</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[237]"></a>FIFO_S_Init</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Create
</UL>

<P><STRONG><a name="[236]"></a>FIFO_S_Create</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[238]"></a>FIFO_S_Destory</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[35d]"></a>FIFO_Put</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[35e]"></a>FIFO_S_Put</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>FIFO_S_Puts</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[360]"></a>FIFO_Get</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[361]"></a>FIFO_S_Get</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[362]"></a>FIFO_GetHead</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[363]"></a>FIFO_S_GetHead</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[364]"></a>FIFO_PreRead</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[365]"></a>FIFO_S_PreRead</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[366]"></a>FIFO_IsEmpty</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[367]"></a>FIFO_S_IsEmpty</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[368]"></a>FIFO_IsFull</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[369]"></a>FIFO_S_IsFull</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[36a]"></a>FIFO_CountUsed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[36b]"></a>FIFO_S_CountUsed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[36c]"></a>FIFO_CountFree</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[36d]"></a>FIFO_S_CountFree</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[36e]"></a>FIFO_Flush</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[36f]"></a>FIFO_S_Flush</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>RampInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ramp.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> controltask.o(.data)
<LI> remotetask.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>RampCalc</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ramp.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> controltask.o(.data)
<LI> remotetask.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>RampSetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ramp.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> controltask.o(.data)
<LI> remotetask.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>RampResetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ramp.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> controltask.o(.data)
<LI> remotetask.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>RampSetScale</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ramp.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> controltask.o(.data)
<LI> remotetask.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>RampIsOverflow</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ramp.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> controltask.o(.data)
<LI> remotetask.o(.data)
</UL>
<P><STRONG><a name="[cc]"></a>LostCounterFeed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lostcounter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2ReceiveMsgProcess
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1ReceiveMsgProcess
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControtLoopTaskInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hi220_getYawPitchRoll
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperviseTask
</UL>

<P><STRONG><a name="[1da]"></a>LostCounterCount</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lostcounter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperviseTask
</UL>

<P><STRONG><a name="[1d9]"></a>LostCounterOverflowCheck</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lostcounter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperviseTask
</UL>

<P><STRONG><a name="[239]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[143]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_uint64
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2lz
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[370]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[371]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[372]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_buffer_simple_append
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_required_member
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_member
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_packed_repeated_member
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;merge_messages
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_to_little_endian_32
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_to_little_endian_64
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unknown_field_pack
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_send_handle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_packet_pack
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgement_data_handle
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagCaliData
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccCaliData
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMagCaliData
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAccCaliData
</UL>

<P><STRONG><a name="[13c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_unpack
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack_to_buffer
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_to_device__frame__init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_to_host__frame__init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_ldlt_f64
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_ldlt_f32
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_selection_sort_f32
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_quick_sort_f32
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_merge_sort_f32
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_insertion_sort_f32
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_heap_sort_f32
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bubble_sort_f32
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bitonic_sort_f32
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefixed_message_pack
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_pack
</UL>

<P><STRONG><a name="[373]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[374]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[375]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[376]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_unpack
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_oneof_member
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;merge_messages
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_param_init
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_service_generated_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_init_generic
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_param_init
</UL>

<P><STRONG><a name="[377]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ff]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack_to_buffer
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_get_packed_size
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_get_packed_size
</UL>

<P><STRONG><a name="[15b]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_service_descriptor_get_method_by_name
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_descriptor_get_field_by_name
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_enum_descriptor_get_value_by_name
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_signal
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_send_handle
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_point
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat0_limit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControlProcess
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalAngleLimit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_bullet_handle
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_small_buff_handle
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_big_buff_handle
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_data_to_pitch_angle
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f64
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_send_handle
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_point
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_sup_handle
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_bullet_handle
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_data_to_pitch_angle
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_sub_f64
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1bc]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_Key_Rotate_Reverse_Control
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Rotate_Reverse_Control
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_ldlt_f64
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_solve_lower_triangular_f64
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_solve_upper_triangular_f64
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_cholesky_f64
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_inverse_f64
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_send_handle
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_point
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat0_limit
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControlProcess
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_bullet_handle
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_small_buff_handle
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_big_buff_handle
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_data_to_pitch_angle
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_ldlt_f64
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_solve_lower_triangular_f64
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_solve_upper_triangular_f64
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_cholesky_f64
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f64
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_inverse_f64
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1bb]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mode_handle
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CapacitanceProcess1
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_Key_Rotate_Reverse_Control
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Rotate_Reverse_Control
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_bullet_handle
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_data_to_pitch_angle
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_follow_change_dirction
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_ldlt_f64
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_solve_lower_triangular_f64
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_solve_upper_triangular_f64
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_cholesky_f64
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_inverse_f64
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_point
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat0_limit
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DistanceProcess
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControlProcess
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_Key_Rotate_Reverse_Control
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Rotate_Reverse_Control
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_gimbal_handle
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_follow_gimbal_handle
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_follow_gimbal_handle
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;separate_gimbal_handle
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_bullet_handle
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_small_buff_handle
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_big_buff_handle
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[1f4]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat0_limit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_bullet_handle
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[22f]"></a>__aeabi_f2lz</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ffixl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_float_to_q31
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_send_handle
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_point
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mode_handle
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_Key_Rotate_Reverse_Control
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Rotate_Reverse_Control
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_sup_handle
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_bullet_handle
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_follow_change_dirction
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Task
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc1
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_send_handle
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_point
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CapacitanceProcess1
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PitchEncoderProcess
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderProcess
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remotecontrolangle
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControlProcess
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalAngleLimit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRemoteBeingAction
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_twist_handle
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_gimbal_handle
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_follow_gimbal_handle
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_sup_handle
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_bullet_handle
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_small_buff_handle
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_big_buff_handle
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_data_to_pitch_angle
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_ldlt_f32
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_is_zeroish
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_send_handle
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_solve_lower_triangular_f64
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_solve_upper_triangular_f64
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_inverse_f64
</UL>

<P><STRONG><a name="[166]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc1
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControlProcess
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalAngleLimit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_Key_Rotate_Reverse_Control
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Rotate_Reverse_Control
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_gimbal_handle
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_follow_gimbal_handle
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_sup_handle
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_small_buff_handle
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_big_buff_handle
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_ldlt_f64
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_ldlt_f32
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_cholesky_f64
</UL>

<P><STRONG><a name="[164]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Task
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc1
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControlProcess
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalAngleLimit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_Key_Rotate_Reverse_Control
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Rotate_Reverse_Control
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRemoteBeingAction
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_sup_handle
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_small_buff_handle
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_big_buff_handle
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_ldlt_f64
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1c1]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat0_limit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mode_handle
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CapacitanceProcess1
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remotecontrolangle
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControlProcess
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalAngleLimit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_twist_handle
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_sup_handle
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_bullet_handle
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_small_buff_handle
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_big_buff_handle
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_data_to_pitch_angle
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_angle_handle
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_follow_chassis_handle
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_follow_change_dirction
</UL>

<P><STRONG><a name="[378]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[23a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[379]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[37b]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[23e]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[241]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[242]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[74]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[37c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[37d]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[37e]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[37f]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[104]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hi220_Reset
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hi220_Reconfig_EOUT
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hi220_Reconfig_SETPTL
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hi220_Reconfig_BAUD
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hi220_Reconfig_ODR
</UL>

<P><STRONG><a name="[380]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[381]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[246]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[382]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[fd]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_send_handle
</UL>

<P><STRONG><a name="[383]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[384]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[248]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[1cf]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remotecontrolangle
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_data_to_pitch_angle
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[1e9]"></a>__hardfp_atan2</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_small_buff_handle
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_big_buff_handle
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_data_to_pitch_angle
</UL>

<P><STRONG><a name="[f7]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_point
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_data_to_pitch_angle
</UL>

<P><STRONG><a name="[163]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Task
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc1
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRemoteBeingAction
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_gimbal_handle
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_follow_gimbal_handle
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_ldlt_f64
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_ldlt_f32
</UL>

<P><STRONG><a name="[f4]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_point
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_data_to_pitch_angle
</UL>

<P><STRONG><a name="[1ce]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remotecontrolangle
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_data_to_pitch_angle
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_cholesky_f64
</UL>

<P><STRONG><a name="[21b]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_cholesky_f32
</UL>

<P><STRONG><a name="[250]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[252]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[24b]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[251]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[247]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[24c]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[24f]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[249]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[385]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[386]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[387]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[24e]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[24d]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[24a]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[232]"></a>fputs</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fputs.o(i.fputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fputs &rArr; fputc &rArr; stderr_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[10b]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack_to_buffer
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_free
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Destory
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Destory
</UL>

<P><STRONG><a name="[10a]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_alloc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Create
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Create
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[cd]"></a>USART1_FIFO_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Init
</UL>

<P><STRONG><a name="[d7]"></a>BSP_FLASH_ReadByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_Read
</UL>

<P><STRONG><a name="[101]"></a>crc16_update</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, hi220.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crc16_update
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
</UL>

<P><STRONG><a name="[1]"></a>system_alloc</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = system_alloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protobuf-c.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>system_free</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = system_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protobuf-c.o(.data)
</UL>
<P><STRONG><a name="[111]"></a>get_tag_size</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, protobuf-c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_get_packed_size
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_get_packed_size
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_get_packed_size
</UL>

<P><STRONG><a name="[10f]"></a>uint32_size</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, protobuf-c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sint32_size
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_packed_payload_length
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefixed_message_pack
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_pack
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_get_packed_size
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_get_packed_size
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_size
</UL>

<P><STRONG><a name="[113]"></a>int32_size</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, protobuf-c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_packed_payload_length
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_get_packed_size
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_get_packed_size
</UL>

<P><STRONG><a name="[10e]"></a>uint64_size</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uint64_size
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_size
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sint64_size
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_packed_payload_length
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_get_packed_size
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_get_packed_size
</UL>

<P><STRONG><a name="[110]"></a>repeated_field_get_packed_size</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = repeated_field_get_packed_size &rArr;  protobuf_c_message_get_packed_size (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_get_packed_size
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sint64_size
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sint32_size
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_size
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32_size
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_size
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tag_size
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_get_packed_size
</UL>

<P><STRONG><a name="[117]"></a>field_is_zeroish</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = field_is_zeroish
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlabeled_field_pack_to_buffer
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlabeled_field_pack
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlabeled_field_get_packed_size
</UL>

<P><STRONG><a name="[118]"></a>unlabeled_field_get_packed_size</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = unlabeled_field_get_packed_size &rArr; required_field_get_packed_size &rArr;  protobuf_c_message_get_packed_size (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_get_packed_size
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_is_zeroish
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_get_packed_size
</UL>

<P><STRONG><a name="[11a]"></a>optional_field_get_packed_size</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = optional_field_get_packed_size &rArr; required_field_get_packed_size &rArr;  protobuf_c_message_get_packed_size (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_get_packed_size
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_get_packed_size
</UL>

<P><STRONG><a name="[11b]"></a>oneof_field_get_packed_size</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = oneof_field_get_packed_size &rArr; required_field_get_packed_size &rArr;  protobuf_c_message_get_packed_size (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_get_packed_size
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_get_packed_size
</UL>

<P><STRONG><a name="[119]"></a>required_field_get_packed_size</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + In Cycle
<LI>Call Chain = required_field_get_packed_size &rArr;  protobuf_c_message_get_packed_size (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_get_packed_size
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sint64_size
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sint32_size
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_size
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32_size
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_size
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tag_size
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_get_packed_size
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneof_field_get_packed_size
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optional_field_get_packed_size
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlabeled_field_get_packed_size
</UL>

<P><STRONG><a name="[11e]"></a>uint32_pack</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uint32_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sint32_pack
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack_to_buffer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_pack_to_buffer
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_buffer_packed_payload
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefixed_message_pack
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_pack
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_pack
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_pack
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32_pack
</UL>

<P><STRONG><a name="[11d]"></a>int32_pack</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = int32_pack &rArr; uint32_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack_to_buffer
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_buffer_packed_payload
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_pack
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack
</UL>

<P><STRONG><a name="[11f]"></a>uint64_pack</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uint64_pack &rArr; uint32_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sint64_pack
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack_to_buffer
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_buffer_packed_payload
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_pack
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_pack
</UL>

<P><STRONG><a name="[120]"></a>tag_pack</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = tag_pack &rArr; uint64_pack &rArr; uint32_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_pack
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack_to_buffer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_pack_to_buffer
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unknown_field_pack_to_buffer
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_pack
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unknown_field_pack
</UL>

<P><STRONG><a name="[121]"></a>unknown_field_pack</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = unknown_field_pack &rArr; tag_pack &rArr; uint64_pack &rArr; uint32_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_pack
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_pack
</UL>

<P><STRONG><a name="[122]"></a>required_field_pack</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = required_field_pack &rArr; sint64_pack &rArr; uint64_pack &rArr; uint32_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boolean_pack
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed64_pack
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed32_pack
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sint64_pack
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sint32_pack
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefixed_message_pack
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_pack
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_pack
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32_pack
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_pack
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_pack
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneof_field_pack
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optional_field_pack
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlabeled_field_pack
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_pack
</UL>

<P><STRONG><a name="[129]"></a>sizeof_elt_in_repeated_array</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sizeof_elt_in_repeated_array &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stderr_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_unpack
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_oneof_member
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_packed_repeated_member
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_repeated_member
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;merge_messages
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_pack_to_buffer
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_pack
</UL>

<P><STRONG><a name="[12a]"></a>copy_to_little_endian_64</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = copy_to_little_endian_64 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_pack
</UL>

<P><STRONG><a name="[12b]"></a>copy_to_little_endian_32</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = copy_to_little_endian_32 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_pack
</UL>

<P><STRONG><a name="[12d]"></a>get_type_min_size</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, protobuf-c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_pack
</UL>

<P><STRONG><a name="[12c]"></a>repeated_field_pack</STRONG> (Thumb, 498 bytes, Stack size 80 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = repeated_field_pack &rArr; required_field_pack &rArr; sint64_pack &rArr; uint64_pack &rArr; uint32_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boolean_pack
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sint64_pack
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sint32_pack
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_type_min_size
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_to_little_endian_32
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_to_little_endian_64
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sizeof_elt_in_repeated_array
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_pack
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_pack
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32_pack
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_pack
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_size
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_pack
</UL>

<P><STRONG><a name="[12f]"></a>unlabeled_field_pack</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = unlabeled_field_pack &rArr; required_field_pack &rArr; sint64_pack &rArr; uint64_pack &rArr; uint32_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_is_zeroish
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_pack
</UL>

<P><STRONG><a name="[130]"></a>optional_field_pack</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = optional_field_pack &rArr; required_field_pack &rArr; sint64_pack &rArr; uint64_pack &rArr; uint32_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_pack
</UL>

<P><STRONG><a name="[131]"></a>oneof_field_pack</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = oneof_field_pack &rArr; required_field_pack &rArr; sint64_pack &rArr; uint64_pack &rArr; uint32_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_pack
</UL>

<P><STRONG><a name="[128]"></a>prefixed_message_pack</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + In Cycle
<LI>Call Chain = prefixed_message_pack &rArr;  protobuf_c_message_pack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_pack
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_pack
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_size
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack
</UL>

<P><STRONG><a name="[133]"></a>unknown_field_pack_to_buffer</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, protobuf-c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_pack_to_buffer
</UL>

<P><STRONG><a name="[134]"></a>pack_buffer_packed_payload</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, protobuf-c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boolean_pack
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sint64_pack
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sint32_pack
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_pack
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32_pack
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_pack_to_buffer
</UL>

<P><STRONG><a name="[135]"></a>get_packed_payload_length</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, protobuf-c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sint64_size
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sint32_size
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_size
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32_size
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_size
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_pack_to_buffer
</UL>

<P><STRONG><a name="[136]"></a>repeated_field_pack_to_buffer</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, protobuf-c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack_to_buffer
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_packed_payload_length
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_buffer_packed_payload
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sizeof_elt_in_repeated_array
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_pack
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_pack_to_buffer
</UL>

<P><STRONG><a name="[138]"></a>unlabeled_field_pack_to_buffer</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, protobuf-c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack_to_buffer
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_is_zeroish
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_pack_to_buffer
</UL>

<P><STRONG><a name="[139]"></a>optional_field_pack_to_buffer</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, protobuf-c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_pack_to_buffer
</UL>

<P><STRONG><a name="[13a]"></a>oneof_field_pack_to_buffer</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, protobuf-c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_pack_to_buffer
</UL>

<P><STRONG><a name="[137]"></a>required_field_pack_to_buffer</STRONG> (Thumb, 636 bytes, Stack size 336 bytes, protobuf-c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_pack_to_buffer
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boolean_pack
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed64_pack
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed32_pack
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sint64_pack
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sint32_pack
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_pack
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_pack
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32_pack
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_pack
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_pack_to_buffer
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneof_field_pack_to_buffer
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optional_field_pack_to_buffer
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlabeled_field_pack_to_buffer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_pack_to_buffer
</UL>

<P><STRONG><a name="[13e]"></a>int_range_lookup</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = int_range_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_descriptor_get_field
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_enum_descriptor_get_value
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_unpack
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_oneof_member
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;merge_messages
</UL>

<P><STRONG><a name="[154]"></a>parse_tag_and_wiretype</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = parse_tag_and_wiretype
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_unpack
</UL>

<P><STRONG><a name="[140]"></a>max_b128_numbers</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = max_b128_numbers
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_packed_elements
</UL>

<P><STRONG><a name="[13d]"></a>merge_messages</STRONG> (Thumb, 684 bytes, Stack size 72 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + In Cycle
<LI>Call Chain = merge_messages &rArr;  merge_messages (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_free
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_alloc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;merge_messages
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_range_lookup
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sizeof_elt_in_repeated_array
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_required_member
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;merge_messages
</UL>

<P><STRONG><a name="[13f]"></a>count_packed_elements</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = count_packed_elements &rArr; max_b128_numbers
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_b128_numbers
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_unpack
</UL>

<P><STRONG><a name="[142]"></a>parse_uint32</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, protobuf-c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_int32
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_required_member
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_packed_repeated_member
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_uint64
</UL>

<P><STRONG><a name="[141]"></a>parse_uint64</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = parse_uint64
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_uint32
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_required_member
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_packed_repeated_member
</UL>

<P><STRONG><a name="[156]"></a>parse_boolean</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, protobuf-c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_required_member
</UL>

<P><STRONG><a name="[145]"></a>parse_repeated_member</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = parse_repeated_member &rArr; parse_required_member &rArr;  protobuf_c_message_unpack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_required_member
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sizeof_elt_in_repeated_array
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_member
</UL>

<P><STRONG><a name="[148]"></a>scan_varint</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, protobuf-c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_packed_repeated_member
</UL>

<P><STRONG><a name="[147]"></a>parse_packed_repeated_member</STRONG> (Thumb, 512 bytes, Stack size 64 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = parse_packed_repeated_member &rArr; sizeof_elt_in_repeated_array &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stderr_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unzigzag64
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unzigzag32
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_int32
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_varint
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_uint64
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_uint32
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sizeof_elt_in_repeated_array
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_member
</UL>

<P><STRONG><a name="[14f]"></a>is_packable_type</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, protobuf-c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_unpack
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_member
</UL>

<P><STRONG><a name="[14c]"></a>parse_optional_member</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = parse_optional_member &rArr; parse_required_member &rArr;  protobuf_c_message_unpack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_required_member
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_member
</UL>

<P><STRONG><a name="[14d]"></a>parse_oneof_member</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = parse_oneof_member &rArr; parse_required_member &rArr;  protobuf_c_message_unpack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_free_unpacked
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_free
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_required_member
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_range_lookup
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sizeof_elt_in_repeated_array
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_member
</UL>

<P><STRONG><a name="[14e]"></a>parse_member</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = parse_member &rArr; parse_oneof_member &rArr; parse_required_member &rArr;  protobuf_c_message_unpack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_alloc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_required_member
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_oneof_member
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_optional_member
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_packable_type
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_packed_repeated_member
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_repeated_member
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_unpack
</UL>

<P><STRONG><a name="[150]"></a>message_init_generic</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = message_init_generic
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_unpack
</UL>

<P><STRONG><a name="[146]"></a>parse_required_member</STRONG> (Thumb, 648 bytes, Stack size 64 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + In Cycle
<LI>Call Chain = parse_required_member &rArr;  protobuf_c_message_unpack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_unpack
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_free_unpacked
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unzigzag64
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unzigzag32
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_int32
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_free
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_alloc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_boolean
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_uint64
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_uint32
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;merge_messages
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_member
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_oneof_member
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_optional_member
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_repeated_member
</UL>

<P><STRONG><a name="[10c]"></a>do_alloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = do_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_unpack
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_buffer_simple_append
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_required_member
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_member
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;merge_messages
</UL>

<P><STRONG><a name="[10d]"></a>do_free</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = do_free
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_unpack
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_free_unpacked
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_buffer_simple_append
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_required_member
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_oneof_member
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;merge_messages
</UL>

<P><STRONG><a name="[112]"></a>sint32_size</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sint32_size
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigzag32
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_size
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_packed_payload_length
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_get_packed_size
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_get_packed_size
</UL>

<P><STRONG><a name="[114]"></a>sint64_size</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sint64_size &rArr; uint64_size
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigzag64
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_size
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_packed_payload_length
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_get_packed_size
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_get_packed_size
</UL>

<P><STRONG><a name="[123]"></a>sint32_pack</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sint32_pack &rArr; uint32_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigzag32
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack_to_buffer
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_buffer_packed_payload
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_pack
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack
</UL>

<P><STRONG><a name="[124]"></a>sint64_pack</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = sint64_pack &rArr; uint64_pack &rArr; uint32_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigzag64
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack_to_buffer
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_buffer_packed_payload
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_pack
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack
</UL>

<P><STRONG><a name="[125]"></a>fixed32_pack</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, protobuf-c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack_to_buffer
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack
</UL>

<P><STRONG><a name="[126]"></a>fixed64_pack</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fixed64_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack_to_buffer
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack
</UL>

<P><STRONG><a name="[127]"></a>boolean_pack</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, protobuf-c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack_to_buffer
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_buffer_packed_payload
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeated_field_pack
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;required_field_pack
</UL>

<P><STRONG><a name="[155]"></a>scan_length_prefixed_data</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = scan_length_prefixed_data
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protobuf_c_message_unpack
</UL>

<P><STRONG><a name="[149]"></a>parse_int32</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = parse_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_required_member
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_packed_repeated_member
</UL>

<P><STRONG><a name="[14a]"></a>unzigzag32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, protobuf-c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_required_member
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_packed_repeated_member
</UL>

<P><STRONG><a name="[14b]"></a>unzigzag64</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = unzigzag64
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_required_member
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_packed_repeated_member
</UL>

<P><STRONG><a name="[160]"></a>zigzag32</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, protobuf-c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sint32_pack
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sint32_size
</UL>

<P><STRONG><a name="[161]"></a>zigzag64</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, protobuf-c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = zigzag64
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sint64_pack
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sint64_size
</UL>

<P><STRONG><a name="[6a]"></a>pid_param_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pid.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pid.o(.text)
</UL>
<P><STRONG><a name="[171]"></a>__set_FAULTMASK</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[172]"></a>__NVIC_SystemReset</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[174]"></a>CheckITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
</UL>

<P><STRONG><a name="[18d]"></a>TI4_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[18b]"></a>TI3_Config</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[189]"></a>TI2_Config</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[187]"></a>TI1_Config</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[197]"></a>SetSysClock</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1a5]"></a>AppParamSave</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iotask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPIDCaliData
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMagCaliData
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAccCaliData
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGyroCaliData
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGimbalCaliData
</UL>

<P><STRONG><a name="[1e2]"></a>get_global_last_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, modeswitch_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_switch_task
</UL>

<P><STRONG><a name="[1de]"></a>gimbal_mode_handle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, modeswitch_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gimbal_mode
</UL>

<P><STRONG><a name="[1dd]"></a>get_gimbal_mode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, modeswitch_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_gimbal_mode &rArr; gimbal_back_param
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_back_param
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_mode_handle
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputMode
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_switch_task
</UL>

<P><STRONG><a name="[1e1]"></a>chassis_mode_handle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, modeswitch_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chassis_mode
</UL>

<P><STRONG><a name="[1e0]"></a>get_chassis_mode</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, modeswitch_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_chassis_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_mode_handle
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputMode
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_switch_task
</UL>

<P><STRONG><a name="[1ef]"></a>cascade_pid_ctrl</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gimbal_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[1ed]"></a>close_loop_handle</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, gimbal_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[1ec]"></a>init_mode_handle</STRONG> (Thumb, 490 bytes, Stack size 24 bytes, gimbal_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_mode_handle &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[1f2]"></a>shoot_bullet_handle</STRONG> (Thumb, 1284 bytes, Stack size 64 bytes, shoot_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = shoot_bullet_handle &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Poke_Current
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShootState
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shot_task
</UL>

<P><STRONG><a name="[1ff]"></a>chassis_stop_handle</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, chassis_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
</UL>

<P><STRONG><a name="[1f9]"></a>auto_sup_handle</STRONG> (Thumb, 432 bytes, Stack size 16 bytes, chassis_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = auto_sup_handle &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
</UL>

<P><STRONG><a name="[1fa]"></a>separate_gimbal_handle</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, chassis_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = separate_gimbal_handle &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
</UL>

<P><STRONG><a name="[1fb]"></a>reverse_follow_gimbal_handle</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, chassis_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = reverse_follow_gimbal_handle &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
</UL>

<P><STRONG><a name="[1fc]"></a>rotate_follow_gimbal_handle</STRONG> (Thumb, 360 bytes, Stack size 8 bytes, chassis_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rotate_follow_gimbal_handle &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
</UL>

<P><STRONG><a name="[1fd]"></a>follow_gimbal_handle</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, chassis_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = follow_gimbal_handle &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
</UL>

<P><STRONG><a name="[1fe]"></a>chassis_twist_handle</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, chassis_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = chassis_twist_handle &rArr; pid_calc &rArr; __hardfp_fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
</UL>

<P><STRONG><a name="[221]"></a>arm_bitonic_sort_core_f32</STRONG> (Thumb, 170 bytes, Stack size 20 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bitonic_sort_f32
</UL>

<P><STRONG><a name="[223]"></a>arm_heapify</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_heapify
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_heapify
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_heap_sort_f32
</UL>

<P><STRONG><a name="[227]"></a>topDownMerge</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_merge_sort_core_f32
</UL>

<P><STRONG><a name="[226]"></a>arm_merge_sort_core_f32</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_merge_sort_core_f32
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;topDownMerge
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_merge_sort_core_f32
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_merge_sort_f32
</UL>

<P><STRONG><a name="[22a]"></a>arm_quick_sort_partition_f32</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_quick_sort_core_f32
</UL>

<P><STRONG><a name="[229]"></a>arm_quick_sort_core_f32</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_quick_sort_core_f32
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_quick_sort_partition_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_quick_sort_core_f32
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_quick_sort_f32
</UL>

<P><STRONG><a name="[230]"></a>stderr_putchar</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, retarget_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = stderr_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITM_SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[253]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[245]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[255]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[254]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
