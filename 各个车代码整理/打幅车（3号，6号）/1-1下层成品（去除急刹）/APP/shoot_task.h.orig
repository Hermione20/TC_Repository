 
/****************************************************************************
 *  @file shoot_task.h
 *  @version 1.1
 *  @date June 2017
 *
 *  @brief shoot bullet task
 *
 ***************************************************************************/
 
#ifndef __SHOOT_TASK_H__
#define __SHOOT_TASK_H__
#include "main.h"
/* shoot task control period time (ms) */
#define SHOT_TASK_PERIOD 5
//标识3号步兵
//#define FRICTION_SPEED  (-1000)
//#define LOW_FRICTION_SPEED (-630)
//标识4号步兵
#if  STANDARD == 3
//#define FRICTION_SPEED_15  (-555)    //比赛前测试射速
//#define FRICTION_SPEED_18  (-620)
//#define FRICTION_SPEED_30  (-925)    

#define FRICTION_SPEED_15  (-530)      //4.10比赛荧光弹射速
#define FRICTION_SPEED_18  (-620)
#define FRICTION_SPEED_30  (-900)


#elif STANDARD ==4


#define FRICTION_SPEED_15  (-560)
#define FRICTION_SPEED_18  (-620)
#define FRICTION_SPEED_30  (-920)

#elif STANDARD == 5
#define FRICTION_SPEED  (-930)
#define LOW_FRICTION_SPEED (-630)

#elif STANDARD == 6
#define FRICTION_SPEED  (-690)
#define LOW_FRICTION_SPEED (-630)

#endif

#define residual_heat_1 (40)
#define residual_heat_2 (35)
#define residual_heat_3 (30)
#define residual_heat_4 (25)
#define residual_heat_5 (20)
#define residual_heat_6 (20)
//#define residual_heat_last_1 (10)
//#define residual_heat_last_2 (20)
#define PID_SHOOT_MOTOR_SPEED_1    (-250)//-400
#define PID_SHOOT_MOTOR_SPEED_2    (-400)//-250
#define PID_SHOOT_MOTOR_SPEED_3    (-450)
#define PID_SHOOT_MOTOR_SPEED_4    (-500)
#define PID_SHOOT_MOTOR_SPEED_5    (-600)
typedef enum
{

	outburst  = 0,
  cooling   = 1,
  speed     = 2,

} shoot_mode_selection_e;

typedef enum
{
  SHOT_DISABLE       = 0,
  REMOTE_CTRL_SHOT   = 1,
  KEYBOARD_CTRL_SHOT = 2,
  SEMIAUTO_CTRL_SHOT = 3,
  AUTO_CTRL_SHOT     = 4,

} shoot_mode_e;

typedef enum
{
  TRIG_INIT       = 0,
  TRIG_PRESS_DOWN = 1,
  TRIG_BOUNCE_UP  = 2,
  TRIG_ONE_DONE   = 3,
} trig_state_e;

typedef __packed struct
{
	/* shoot task relevant param */
	shoot_mode_e ctrl_mode;
	uint8_t      shoot_cmd;
	uint32_t     c_shoot_time;   //continuous
	uint8_t      c_shoot_cmd;
	uint8_t      fric_wheel_run; //run or not
	uint16_t     fric_wheel_spd;
	uint16_t     ref_shot_bullets;
	uint16_t     shot_bullets;
	uint16_t     remain_bullets;
	float        total_speed;
	float        limit_heart0;
	uint16_t     max_heart0;
	uint16_t     handle_timescouter;
	uint16_t     cooling_ratio;
	uint16_t     ShootMotorSpeed;
	uint16_t     NoLimitHeat;
	uint8_t			 Speed_Gear;
} shoot_t;

typedef __packed struct
{
	/* trigger motor param */
	int32_t   spd_ref;
	int32_t   pos_ref;
	int8_t    dir;
	uint8_t   key;
	uint8_t   key_last;
	uint32_t  one_time;
	int32_t   feed_bullet_spd;
	int32_t   c_shot_spd;
	trig_state_e one_sta;
} trigger_t;

typedef enum
{
  SHOOT_CMD,
  FRIC_CTRL,
} shoot_type_e;
void Mode_switch(void);
void System_performance(void);
 void Speed_switch(void);
	void Heat0_switch(void);
void shot_param_init(void);
void shot_task(void);
void heat0_limit(void);
static void shoot_bullet_handle(void);
static void fric_wheel_ctrl(void);
void shoot_friction_handle(void);
void shoot_buff_handle(void);
extern shoot_t   shot;
extern trigger_t trig;
extern u8 friction_rotor;

extern float Delta_Dect_Angle_Yaw;
extern float Delta_Dect_Angle_Pit;
extern FrictionWheelState_e friction_wheel_state;
extern shoot_mode_selection_e shoot_mode_selection;
#endif
